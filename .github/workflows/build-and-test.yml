name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      CI: true
      RDS_DATA_API_CLIENT_DATABASE: test
      RDS_DATA_API_CLIENT_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
      RDS_DATA_API_CLIENT_RESOURCE_ARN: arn:aws:rds:us-east-1:123456789012:cluster:dummy
      RDS_DATA_API_CLIENT_SECRETARN: arn:aws:secretsmanager:us-east-1:123456789012:secret:dummy
      # these are not valid keys!
      AWS_ACCESS_KEY_ID: AKIA2L3C3ROEOPJIS4FW
      AWS_SECRET_ACCESS_KEY: akLSBoe8qJF2lXZCBq/ATPytWSnGRNMEJG11+fg/

    strategy:
      matrix:
        node-version: [12.x]
        # node-version: [10.x, 12.x, 14.x]

    steps:
      - uses: actions/checkout@v2

      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.node-version }}-
            ${{ runner.os }}-npm-

      - name: install
        run: |
          npm i

      - name: static checks
        run: |
          npm run lint

      - name: build
        run: |
          npm run build

      - name: test with PostgreSQL
        run: |
          docker network rm $(docker network ls -q) || true
          docker-compose -f docker/pg.yml up -d
          for i in {1..30};do echo -e "check $i\n";curl -i 'http://localhost:8080/' || true;echo -e '\n';sleep 1;done
          aws --endpoint-url 'http://localhost:8080' rds-data execute-statement --database 'test' --resource-arn $RDS_DATA_API_CLIENT_RESOURCE_ARN --secret-arn $RDS_DATA_API_CLIENT_SECRETARN --sql 'SELECT 1 AS hi'
          npm run test-pg -- --runInBand --ci
          docker-compose -f docker/pg.yml down -v
        env:
          DB_TYPE: postgresql

      - name: test with MySQL
        run: |
          docker network rm $(docker network ls -q) || true
          docker-compose -f docker/mysql.yml up -d
          for i in {1..30};do echo -e "check $i\n";curl -i 'http://localhost:8080/' || true;echo -e '\n';sleep 1;done
          aws --endpoint-url 'http://localhost:8080' rds-data execute-statement --database 'test' --resource-arn $RDS_DATA_API_CLIENT_RESOURCE_ARN --secret-arn $RDS_DATA_API_CLIENT_SECRETARN --sql 'SELECT 1 AS hi'
          npm run test-mysql -- --runInBand --ci
          docker-compose -f docker/mysql.yml down -v
        env:
          DB_TYPE: mysql
